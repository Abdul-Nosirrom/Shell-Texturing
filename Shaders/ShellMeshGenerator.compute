// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<int> _Triangles;

RWStructuredBuffer<float3> _Positions;
RWStructuredBuffer<float3> _Normals;
RWStructuredBuffer<float2> _UVs;
RWStructuredBuffer<float4> _Colors;

int _NumShells;
int _VertexCount;
float _Height;
int _TriangleCount;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int triIdx = id.x;

    float shellDisplacement = _Height / _NumShells;

    // Skip execution if the thread is out of bounds
    if (triIdx >= _TriangleCount)
        return;

    // Get indices of the vertices of the triangle
    int v1 = _Triangles[triIdx * 3 + 0];
    int v2 = _Triangles[triIdx * 3 + 1];
    int v3 = _Triangles[triIdx * 3 + 2];

    // Get the position normals uvs and colors of the vertices in this triangle
    float3 p1_og = _Positions[v1];
    float3 p2_og = _Positions[v2];
    float3 p3_og = _Positions[v3];

    float3 n1_og = _Normals[v1];
    float3 n2_og = _Normals[v2];
    float3 n3_og = _Normals[v3];

    float2 uv1_og = _UVs[v1];
    float2 uv2_og = _UVs[v2];
    float2 uv3_og = _UVs[v3];
    
    for (int i = 0; i < _NumShells; i++)
    {
        // Setup raw data of the new vertices
        float4 color = i * 1.f / (_NumShells - 1);

    	// Indices for the new shell vertices
        int index1 = i * _VertexCount + v1;
        int index2 = i * _VertexCount + v2;
        int index3 = i * _VertexCount + v3;
        
        float3 p1 = p1_og + n1_og * shellDisplacement * i;
        float3 p2 = p2_og + n2_og * shellDisplacement * i;
        float3 p3 = p3_og + n3_og * shellDisplacement * i;

        _Positions[index1] = p1;
        _Positions[index2] = p2;
        _Positions[index3] = p3;

        _Normals[index1] = n1_og;
        _Normals[index2] = n2_og;
        _Normals[index3] = n3_og;

        _UVs[index1] = uv1_og;
        _UVs[index2] = uv2_og;
        _UVs[index3] = uv3_og;

        _Colors[index1] = color;
        _Colors[index2] = color;
        _Colors[index3] = color;

        // Set Triangle Indices (same as before just duplicated + triangle count)
        _Triangles[i * _TriangleCount * 3 + triIdx * 3 + 0] = index1;
        _Triangles[i * _TriangleCount * 3 + triIdx * 3 + 1] = index2;
        _Triangles[i * _TriangleCount * 3 + triIdx * 3 + 2] = index3;
    }
}